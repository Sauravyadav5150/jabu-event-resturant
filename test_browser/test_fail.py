# Generated by Selenium IDE
import pytest
import time
import json
from selenium.webdriver.support.ui import WebDriverWait  
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
username = "test@test.dev"
password  = "test"

'''
css selectors on browsers. 

3 basic types 
1. ID 
2. Class 
3. Tag 
derived 
:selected
:hover
:visible 
:hidden

mixed 
TAG#ID.class >TAG#ID.class 




'''

class TestFailVaruntest():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
    driver = self.driver
    # get google.co.in 
    driver.get("http://localhost:8069/web/login") 
    driver.find_element(By.ID, "login").send_keys(username)
    driver.find_element(By.ID, "password").send_keys(password)
    #driver.get("http://localhost:8069/web/login")
    driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    try: 
      # wait 10 seconds before looking for element 
      element = WebDriverWait(driver, 10).until( 
        expected_conditions.presence_of_element_located((By.CLASS_NAME, "o_navbar")) 
      ) 
      get_url= driver.current_url
    finally: 
      # else quit 
      get_url= driver.current_url
    time.sleep(3)
  def teardown_method(self, method):
    self.driver.quit()

  def get_value(self):
    self.driver.get("http://localhost:8069/web")
    time.sleep(3)
    self.driver.find_element(By.CSS_SELECTOR, ".o_pager_value").click() 
    self.driver.find_element(By.CSS_SELECTOR, ".o_pager_value.o_input").send_keys(1000)
    self.driver.find_element(By.CSS_SELECTOR, ".o_pager_value.o_input").send_keys(Keys.ENTER)
    time.sleep(3)
    value = self.driver.find_element(By.CSS_SELECTOR, ".o_pager_value").text
    print(value)
    return value.split("-")[-1]



  
  def test_failVaruntest(self,name,contact,add):
    self.driver.get("http://localhost:8069/web")
    self.driver.set_window_size(1140, 538)
    self.driver.find_element(By.CSS_SELECTOR,".dropdown.o_navbar_apps_menu").click()
    time.sleep(3)
    self.driver.find_element(By.XPATH,"//a[contains(text(),'Apps')]").click()
    time.sleep(3)
    self.driver.find_element(By.CSS_SELECTOR, ".btn.btn-primary.o_list_button_add").click()
    driver = self.driver
    try: 
      # wait 10 seconds before looking for element 
      element = WebDriverWait(driver, 10).until( 
        expected_conditions.presence_of_element_located((By.ID, "name")) 
      ) 
      get_url= driver.current_url
    finally: 
      # else quit 
      get_url= driver.current_url

    self.driver.find_element(By.ID, "name").send_keys(name)
    self.driver.find_element(By.ID, "title").send_keys(name) 
    self.driver.find_element(By.ID, "author").send_keys(contact)
    # self.driver.find_element(By.ID, "address").send_keys(add)
    # self.driver.find_element(By.CSS_SELECTOR, ".o_content").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".active").click()
    time.sleep(3)
    #element = 
    self.driver.find_element(By.CSS_SELECTOR, ".o_form_button_save").click()
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element).perform()
    # element = self.driver.find_element(By.CSS_SELECTOR, "body")
    # actions = ActionChains(self.driver)
    #actions.move_to_element(element, 0, 0).perform()
    # self.driver.find_element(By.CSS_SELECTOR, ".fa-cloud-upload").click() 
    time.sleep(3)
    self.driver.find_element(By.CSS_SELECTOR, ".o_back_button > a").click()
    time.sleep(3)
    # assert self.driver.title == "Odoo - Members Window"
  
y = TestFailVaruntest()
y.setup_method()
# before = y.get_value()
# after = -1
# print("before test %s after test %s"%(before,after))
for each in range(10):
  y.test_failVaruntest("Book%s "%each,each,"add%s"%each)
# after = y.get_value()
# print("before test %s after test %s"%(before,after))



# try:
#     1/1
# except:
#     print("this is an infinity")
# finally:
#     print("this will always run")